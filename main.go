/*
 * API POC Server
 *
 * This is a proof of concept OpenAPI server
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"log"
	"net/http"

	"github.com/awslabs/aws-lambda-go-api-proxy/gorillamux"
	"github.com/rakyll/statik/fs"
	sw "go.evidencewallet.com/apiserver/go"
	_ "go.evidencewallet.com/apiserver/statik"
)

var gmux *gorillamux.GorillaMuxAdapter

func init() {
	//DbMigrate()
	log.Printf("Server cold started")

	router := sw.NewRouter()

	statikFS, err := fs.New()
	if err != nil {
		panic(err)
	}
	staticServer := http.FileServer(statikFS)

	sh := http.StripPrefix("/ui/", staticServer)
	router.PathPrefix("/ui/").Handler(sh)

	//log.Fatal(http.ListenAndServe(":8080", router))
	gmux = gorillamux.New(router)
}

func Handler(req events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	// If no name is provided in the HTTP request body, throw an error
	return gmux.Proxy(req)
}

func main() {
	lambda.Start(Handler)
}

//func DbMigrate() {
//	region := os.Getenv("AWS_REGION")
//	appTableName := os.Getenv("APP_TABLE_NAME")
//
//	sess, err := session.NewSession(&aws.Config{
//		Region: aws.String(region)},
//	)
//
//	// Create DynamoDB client
//	svc := dynamodb.New(sess)
//
//	result, err := svc.ListTables(&dynamodb.ListTablesInput{})
//	if err != nil {
//		fmt.Println(err)
//		os.Exit(1)
//	}
//
//	createTable := true
//	for _, n := range result.TableNames {
//		if appTableName == *n {
//			fmt.Printf("Found table: %s\n", appTableName)
//			createTable = false
//			break;
//		}
//	}
//
//	if createTable {
//		fmt.Printf("Creating table '%s' in '%s'\n", appTableName, region)
//
//		input := &dynamodb.CreateTableInput{
//			AttributeDefinitions: []*dynamodb.AttributeDefinition{
//				{
//					AttributeName: aws.String("year"),
//					AttributeType: aws.String("N"),
//				},
//				{
//					AttributeName: aws.String("title"),
//					AttributeType: aws.String("S"),
//				},
//			},
//			KeySchema: []*dynamodb.KeySchemaElement{
//				{
//					AttributeName: aws.String("year"),
//					KeyType:       aws.String("HASH"),
//				},
//				{
//					AttributeName: aws.String("title"),
//					KeyType:       aws.String("RANGE"),
//				},
//			},
//			ProvisionedThroughput: &dynamodb.ProvisionedThroughput{
//				ReadCapacityUnits:  aws.Int64(10),
//				WriteCapacityUnits: aws.Int64(10),
//			},
//			TableName: aws.String("Movies"),
//		}
//
//		_, err = svc.CreateTable(input)
//
//		if err != nil {
//			fmt.Println("Got error calling CreateTable:")
//			fmt.Println(err.Error())
//			os.Exit(1)
//		}
//
//		fmt.Println("Table created")
//	}
//}
